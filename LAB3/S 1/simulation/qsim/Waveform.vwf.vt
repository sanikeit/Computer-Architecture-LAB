// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/22/2021 11:23:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          FINAL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FINAL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] IN1;
reg [3:0] IN2;
reg [2:0] SEL;
// wires                                               
wire [6:0] OUT1;
wire [6:0] OUT2;
wire [6:0] OUT3;
wire [6:0] OUT4;

// assign statements (if any)                          
FINAL i1 (
// port map - connection between master ports and signals/registers   
	.IN1(IN1),
	.IN2(IN2),
	.OUT1(OUT1),
	.OUT2(OUT2),
	.OUT3(OUT3),
	.OUT4(OUT4),
	.SEL(SEL)
);
initial 
begin 
#1000000 $finish;
end 
// IN1[ 3 ]
initial
begin
	repeat(6)
	begin
		IN1[3] = 1'b0;
		IN1[3] = #80000 1'b1;
		# 80000;
	end
	IN1[3] = 1'b0;
end 
// IN1[ 2 ]
initial
begin
	repeat(12)
	begin
		IN1[2] = 1'b0;
		IN1[2] = #40000 1'b1;
		# 40000;
	end
	IN1[2] = 1'b0;
end 
// IN1[ 1 ]
always
begin
	IN1[1] = 1'b0;
	IN1[1] = #20000 1'b1;
	#20000;
end 
// IN1[ 0 ]
always
begin
	IN1[0] = 1'b0;
	IN1[0] = #10000 1'b1;
	#10000;
end 
// IN2[ 3 ]
initial
begin
	repeat(3)
	begin
		IN2[3] = 1'b0;
		IN2[3] = #160000 1'b1;
		# 160000;
	end
	IN2[3] = 1'b0;
end 
// IN2[ 2 ]
initial
begin
	repeat(6)
	begin
		IN2[2] = 1'b0;
		IN2[2] = #80000 1'b1;
		# 80000;
	end
	IN2[2] = 1'b0;
end 
// IN2[ 1 ]
initial
begin
	repeat(12)
	begin
		IN2[1] = 1'b0;
		IN2[1] = #40000 1'b1;
		# 40000;
	end
	IN2[1] = 1'b0;
end 
// IN2[ 0 ]
always
begin
	IN2[0] = 1'b0;
	IN2[0] = #20000 1'b1;
	#20000;
end 
// SEL[ 2 ]
initial
begin
	SEL[2] = 1'b0;
	SEL[2] = #600000 1'b1;
	SEL[2] = #300000 1'b0;
end 
// SEL[ 1 ]
initial
begin
	SEL[1] = 1'b0;
	SEL[1] = #150000 1'b1;
	SEL[1] = #150000 1'b0;
	SEL[1] = #150000 1'b1;
end 
// SEL[ 0 ]
initial
begin
	SEL[0] = 1'b0;
	SEL[0] = #300000 1'b1;
	SEL[0] = #150000 1'b0;
	SEL[0] = #150000 1'b1;
	SEL[0] = #150000 1'b0;
end 
endmodule

