// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/25/2021 09:00:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          pc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr;
reg [31:0] d;
reg e;
reg inc;
reg [31:0] treg_output1;
// wires                                               
wire [31:0] output1;

// assign statements (if any)                          
assign output1 = treg_output1;
pc i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clr(clr),
	.d(d),
	.e(e),
	.inc(inc),
	.output1(output1)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 

// clr
initial
begin
	clr = 1'b0;
	clr = #400000 1'b1;
	clr = #100000 1'b0;
	clr = #300000 1'b1;
	clr = #100000 1'b0;
end 
// d[ 31 ]
initial
begin
	d[31] = 1'b0;
end 
// d[ 30 ]
initial
begin
	d[30] = 1'b0;
end 
// d[ 29 ]
initial
begin
	d[29] = 1'b0;
end 
// d[ 28 ]
initial
begin
	d[28] = 1'b0;
end 
// d[ 27 ]
initial
begin
	d[27] = 1'b0;
end 
// d[ 26 ]
initial
begin
	d[26] = 1'b0;
end 
// d[ 25 ]
initial
begin
	d[25] = 1'b0;
end 
// d[ 24 ]
initial
begin
	d[24] = 1'b0;
end 
// d[ 23 ]
initial
begin
	d[23] = 1'b0;
end 
// d[ 22 ]
initial
begin
	d[22] = 1'b0;
end 
// d[ 21 ]
initial
begin
	d[21] = 1'b0;
end 
// d[ 20 ]
initial
begin
	d[20] = 1'b0;
end 
// d[ 19 ]
initial
begin
	d[19] = 1'b0;
end 
// d[ 18 ]
initial
begin
	d[18] = 1'b0;
end 
// d[ 17 ]
initial
begin
	d[17] = 1'b0;
end 
// d[ 16 ]
initial
begin
	d[16] = 1'b0;
end 
// d[ 15 ]
initial
begin
	d[15] = 1'b0;
end 
// d[ 14 ]
initial
begin
	d[14] = 1'b0;
end 
// d[ 13 ]
initial
begin
	d[13] = 1'b0;
end 
// d[ 12 ]
initial
begin
	d[12] = 1'b0;
end 
// d[ 11 ]
initial
begin
	d[11] = 1'b0;
end 
// d[ 10 ]
initial
begin
	d[10] = 1'b0;
end 
// d[ 9 ]
initial
begin
	d[9] = 1'b0;
end 
// d[ 8 ]
initial
begin
	d[8] = 1'b0;
end 
// d[ 7 ]
initial
begin
	d[7] = 1'b0;
end 
// d[ 6 ]
initial
begin
	d[6] = 1'b0;
end 
// d[ 5 ]
initial
begin
	d[5] = 1'b0;
end 
// d[ 4 ]
initial
begin
	d[4] = 1'b0;
end 
// d[ 3 ]
initial
begin
	d[3] = 1'b0;
	d[3] = #800000 1'b1;
end 
// d[ 2 ]
initial
begin
	d[2] = 1'b0;
	d[2] = #400000 1'b1;
	d[2] = #400000 1'b0;
end 
// d[ 1 ]
initial
begin
	repeat(2)
	begin
		d[1] = 1'b0;
		d[1] = #200000 1'b1;
		# 200000;
	end
	d[1] = 1'b0;
end 
// d[ 0 ]
always
begin
	d[0] = 1'b0;
	d[0] = #100000 1'b1;
	#100000;
end 

// e
initial
begin
	e = 1'b1;
	e = #100000 1'b0;
	e = #200000 1'b1;
	e = #100000 1'b0;
	e = #400000 1'b1;
	e = #100000 1'b0;
end 

// inc
initial
begin
	inc = 1'b0;
	inc = #100000 1'b1;
	inc = #200000 1'b0;
	inc = #300000 1'b1;
	inc = #100000 1'b0;
	inc = #100000 1'b1;
	inc = #100000 1'b0;
end 
// output1[ 31 ]
initial
begin
	treg_output1[31] = 1'bZ;
end 
// output1[ 30 ]
initial
begin
	treg_output1[30] = 1'bZ;
end 
// output1[ 29 ]
initial
begin
	treg_output1[29] = 1'bZ;
end 
// output1[ 28 ]
initial
begin
	treg_output1[28] = 1'bZ;
end 
// output1[ 27 ]
initial
begin
	treg_output1[27] = 1'bZ;
end 
// output1[ 26 ]
initial
begin
	treg_output1[26] = 1'bZ;
end 
// output1[ 25 ]
initial
begin
	treg_output1[25] = 1'bZ;
end 
// output1[ 24 ]
initial
begin
	treg_output1[24] = 1'bZ;
end 
// output1[ 23 ]
initial
begin
	treg_output1[23] = 1'bZ;
end 
// output1[ 22 ]
initial
begin
	treg_output1[22] = 1'bZ;
end 
// output1[ 21 ]
initial
begin
	treg_output1[21] = 1'bZ;
end 
// output1[ 20 ]
initial
begin
	treg_output1[20] = 1'bZ;
end 
// output1[ 19 ]
initial
begin
	treg_output1[19] = 1'bZ;
end 
// output1[ 18 ]
initial
begin
	treg_output1[18] = 1'bZ;
end 
// output1[ 17 ]
initial
begin
	treg_output1[17] = 1'bZ;
end 
// output1[ 16 ]
initial
begin
	treg_output1[16] = 1'bZ;
end 
// output1[ 15 ]
initial
begin
	treg_output1[15] = 1'bZ;
end 
// output1[ 14 ]
initial
begin
	treg_output1[14] = 1'bZ;
end 
// output1[ 13 ]
initial
begin
	treg_output1[13] = 1'bZ;
end 
// output1[ 12 ]
initial
begin
	treg_output1[12] = 1'bZ;
end 
// output1[ 11 ]
initial
begin
	treg_output1[11] = 1'bZ;
end 
// output1[ 10 ]
initial
begin
	treg_output1[10] = 1'bZ;
end 
// output1[ 9 ]
initial
begin
	treg_output1[9] = 1'bZ;
end 
// output1[ 8 ]
initial
begin
	treg_output1[8] = 1'bZ;
end 
// output1[ 7 ]
initial
begin
	treg_output1[7] = 1'bZ;
end 
// output1[ 6 ]
initial
begin
	treg_output1[6] = 1'bZ;
end 
// output1[ 5 ]
initial
begin
	treg_output1[5] = 1'bZ;
end 
// output1[ 4 ]
initial
begin
	treg_output1[4] = 1'bZ;
end 
// output1[ 3 ]
initial
begin
	treg_output1[3] = 1'bZ;
end 
// output1[ 2 ]
initial
begin
	treg_output1[2] = 1'bZ;
end 
// output1[ 1 ]
initial
begin
	treg_output1[1] = 1'bZ;
end 
// output1[ 0 ]
initial
begin
	treg_output1[0] = 1'bZ;
end 
endmodule

